{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\n\n// make form logic generic so we can use it on any form.\nconst useForm = function (callback) {\n  _s();\n  let defaultValues = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const [values, setValues] = useState({});\n  const handleSubmit = event => {\n    event.preventDefault();\n    callback(values);\n  };\n  const handleChange = event => {\n    event.persist(); // specific to React, allows us to set state values.\n\n    let {\n      name,\n      value\n    } = event.target; // the input element, and the slider\n    if (parseInt(value)) {\n      // convert string with numeric characters to numbers, don't put numbers\n      value = parseInt(value);\n    }\n    setValues(values => ({\n      ...values,\n      [name]: value\n    }));\n  };\n  useEffect(() => {\n    setValues(defaultValues);\n  }, [defaultValues]);\n\n  // we are not returning JSX, instead we return functions and values.\n  return {\n    handleChange,\n    handleSubmit,\n    values\n  };\n};\n_s(useForm, \"4c1Ci3oJ83EEKxNRiCpxRYlnLCc=\");\nexport default useForm;","map":{"version":3,"names":["useState","useEffect","useForm","callback","defaultValues","values","setValues","handleSubmit","event","preventDefault","handleChange","persist","name","value","target","parseInt"],"sources":["/home/alfredo_orquiz/projects/school/codefellows/courses/401/todo-app/src/hooks/form.js"],"sourcesContent":["import { useState, useEffect } from 'react';\n\n// make form logic generic so we can use it on any form.\nconst useForm = (callback, defaultValues={}) => {\n\n  const [values, setValues] = useState({});\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    callback(values);\n  };\n\n  const handleChange = (event) => {\n    event.persist(); // specific to React, allows us to set state values.\n\n    let { name, value } = event.target; // the input element, and the slider\n    if (parseInt(value)) { // convert string with numeric characters to numbers, don't put numbers\n      value = parseInt(value);\n    }\n\n    setValues(values => ({ ...values, [name]: value }));\n  };\n\n  useEffect( () => {\n    setValues( defaultValues );\n  }, [defaultValues]);\n\n  // we are not returning JSX, instead we return functions and values.\n  return {\n    handleChange,\n    handleSubmit,\n    values,\n  };\n};\n\nexport default useForm;"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAE3C;AACA,MAAMC,OAAO,GAAG,UAACC,QAAQ,EAAuB;EAAA;EAAA,IAArBC,aAAa,uEAAC,CAAC,CAAC;EAEzC,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGN,QAAQ,CAAC,CAAC,CAAC,CAAC;EAExC,MAAMO,YAAY,GAAIC,KAAK,IAAK;IAC9BA,KAAK,CAACC,cAAc,EAAE;IACtBN,QAAQ,CAACE,MAAM,CAAC;EAClB,CAAC;EAED,MAAMK,YAAY,GAAIF,KAAK,IAAK;IAC9BA,KAAK,CAACG,OAAO,EAAE,CAAC,CAAC;;IAEjB,IAAI;MAAEC,IAAI;MAAEC;IAAM,CAAC,GAAGL,KAAK,CAACM,MAAM,CAAC,CAAC;IACpC,IAAIC,QAAQ,CAACF,KAAK,CAAC,EAAE;MAAE;MACrBA,KAAK,GAAGE,QAAQ,CAACF,KAAK,CAAC;IACzB;IAEAP,SAAS,CAACD,MAAM,KAAK;MAAE,GAAGA,MAAM;MAAE,CAACO,IAAI,GAAGC;IAAM,CAAC,CAAC,CAAC;EACrD,CAAC;EAEDZ,SAAS,CAAE,MAAM;IACfK,SAAS,CAAEF,aAAa,CAAE;EAC5B,CAAC,EAAE,CAACA,aAAa,CAAC,CAAC;;EAEnB;EACA,OAAO;IACLM,YAAY;IACZH,YAAY;IACZF;EACF,CAAC;AACH,CAAC;AAAC,GA9BIH,OAAO;AAgCb,eAAeA,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}